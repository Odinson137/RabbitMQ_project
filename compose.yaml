# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: rabbitmq-diagnostics -q listeners
      interval: 3s
      timeout: 10s
      retries: 60
      
  server-client-main:
    build:
      context: .
      target: final
      dockerfile: RabbitMQ/Dockerfile
    ports:
      - 8080:8080
    depends_on:
      rabbitmq:
        condition: service_healthy

  server-client1:
    build:
      context: .
      target: final
      dockerfile: RabbitMQ/Dockerfile
    ports:
      - 8081:8081
    depends_on:
      server-client-main:
        condition: service_started
  
  server-client2:
    build:
      context: .
      target: final
      dockerfile: RabbitMQ/Dockerfile
    ports:
      - 8082:8082
    depends_on:
      server-client-main:
        condition: service_started

  server-client3:
    build:
      context: .
      target: final
      dockerfile: RabbitMQ/Dockerfile
    ports:
      - 8083:8083
    depends_on:
      server-client-main:
        condition: service_started
           

  server-client4:
    build:
      context: .
      target: final
      dockerfile: RabbitMQ/Dockerfile
    ports:
      - 8084:8084
    depends_on:
      server-client-main:
        condition: service_started  
        
  server-client5:
    build:
      context: .
      target: final
      dockerfile: RabbitMQ/Dockerfile
    ports:
      - 8085:8085
    depends_on:
      server-client-main:
        condition: service_started

  server-client6:
    build:
      context: .
      target: final
      dockerfile: RabbitMQ/Dockerfile
    ports:
      - 8088:8088
    depends_on:
      server-client-main:
        condition: service_started
        
  server-client7:
    build:
      context: .
      target: final
      dockerfile: RabbitMQ/Dockerfile
    ports:
      - 8086:8086
    depends_on:
      server-client-main:
        condition: service_started
  
  server-client8:
    build:
      context: .
      target: final
      dockerfile: RabbitMQ/Dockerfile
    ports:
      - 8087:8087
    depends_on:
      server-client-main:
        condition: service_started
        
        #  client1:
#    build:
#      dockerfile: Client_receiver/Dockerfile
#      context: .
#      target: final
#    ports:
#      - 8081:8081

        
#  client2:
#    build:
#      dockerfile: ..//Client_receiver/Dockerfile
#      context: .
#      target: final
#    ports:
#      - 8082:8082
# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

